% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tables.R
\name{tableone}
\alias{tableone}
\title{Create a Table 1}
\usage{
tableone(
  df,
  ...,
  group = NULL,
  neg_label = "No",
  pos_label = "Yes",
  test = TRUE,
  caption = NULL,
  output = "text",
  type = c("pvalues", "simple", "condensed")
)
}
\arguments{
\item{df}{a dataframe}

\item{...}{a list of columns to be included in the table}

\item{group}{a group to split the columns by}

\item{neg_label}{label of the negative \code{group}}

\item{pos_label}{label of the positive \code{group}}

\item{test}{logical; if set to \code{TRUE} then the appropriate bivariate tests of significance are performed if splitby has more than 1 level. A message is printed when the variances of the continuous variables being tested do not meet the assumption of Homogeneity of Variance (using Breusch-Pagan Test of Heteroskedasticity) and, therefore, the argument `var.equal = FALSE` is used in the test.}

\item{caption}{when \code{output != "text"}; option is passed to \code{knitr::kable}}

\item{output}{how the table is output; can be "text" or "text2" for regular console output or any of \code{kable()}'s options from \code{knitr} (e.g., "latex", "markdown", "pandoc"). A new option, \code{'latex2'}, although more limited, allows the variable name to show and has an overall better appearance.}

\item{type}{what is displayed in the table; a string or a vector of strings. Two main sections can be inputted: 1. if test = TRUE, can write "pvalues", "full", or "stars" and 2. can state "simple" and/or "condense". These are discussed in more depth in the details section below.}
}
\value{
a table; the output varies based on the \code{output} parameter.
}
\description{
This function provides a wrapper around \code{furniture::\link[furniture:table1]{table1}} that allows it to
utilize \code{Hmisc::\link[Hmisc:label]{label}} as variable labels. It also automatically converts logicals
to factors so logical dataframe columns are included in the table.
}
\examples{
diamonds <- ggplot2::diamonds
diamonds$expensive <- diamonds$price > 500
Hmisc::label(diamonds$depth) <- "Depth"
Hmisc::label(diamonds$table) <- "Table"
Hmisc::label(diamonds$price) <- "Price"
Hmisc::label(diamonds$clarity) <- "Clarity"
Hmisc::label(diamonds$cut) <- "Cut"
Hmisc::label(diamonds$expensive) <- "Expensive"
diamonds \%>\% tableone(depth, table, price, clarity, expensive, group = cut)


}
